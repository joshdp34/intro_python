[
  {
    "objectID": "15_Data_Vis.html#introduction-to-matplotlib",
    "href": "15_Data_Vis.html#introduction-to-matplotlib",
    "title": "15  Data Visualization in Python",
    "section": "15.1 Introduction to Matplotlib",
    "text": "15.1 Introduction to Matplotlib\nMatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. It is often the first choice for many data scientists and analysts due to its flexibility and the detailed control it offers over plots. Matplotlib is organized into several components, with the pyplot module being the most commonly used. This module provides a MATLAB-like interface that simplifies the process of creating and customizing plots.\n\n15.1.1 Creating Basic Plots with Matplotlib\nThe most fundamental plot in Matplotlib is the line plot, which is typically used to visualize trends over time or continuous data. To get started with plotting in Matplotlib, you need to import the pyplot module:\n\nimport matplotlib.pyplot as plt\n\nExample: Plotting a Simple Line Graph\n\n# Data for plotting\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\n\n# Creating a line plot\nplt.plot(x, y)\nplt.xlabel('X-axis label')\nplt.ylabel('Y-axis label')\nplt.title('Simple Line Plot')\nplt.grid(True)  # Adds a grid to the plot\nplt.show()\n\n\n\n\nThis example creates a simple line plot with labeled axes, a title, and a grid. The method plt.show() is used to render the plot.\n\n\n15.1.2 Types of Plots in Matplotlib\nMatplotlib supports a wide variety of plot types beyond simple line graphs. Some of the most commonly used plot types include:\n\nScatter Plots: Useful for exploring relationships between two variables.\nBar Charts: Ideal for comparing discrete categories.\nHistograms: Commonly used to display the distribution of data.\nPie Charts: Used to show proportions of a whole.\nBox Plots: Effective for visualizing the spread and outliers of data.\n\nExample: Creating a Scatter Plot\n\n# Data for scatter plot\nx = [5, 7, 8, 5, 9, 7]\ny = [3, 8, 4, 7, 2, 5]\n\n# Creating the scatter plot\nplt.scatter(x, y, color='blue', marker='^')\nplt.xlabel('X-axis label')\nplt.ylabel('Y-axis label')\nplt.title('Scatter Plot Example')\nplt.show()\n\n\n\n\nIn this example, we use plt.scatter() to create a scatter plot, where the color and marker style of the points can be easily customized.\n\n\n15.1.3 Customizing Plots in Matplotlib\nCustomization is one of Matplotlib’s greatest strengths. You can modify almost every aspect of a plot, including colors, line styles, markers, axis scales, legends, and more. This flexibility allows you to create publication-quality visualizations.\nExample: Customizing a Line Plot\n\n# Customizing the line plot\nplt.plot(x, y, color='red', linestyle='--', linewidth=2, marker='o', markersize=8, markerfacecolor='yellow')\nplt.xlabel('X-axis label')\nplt.ylabel('Y-axis label')\nplt.title('Customized Line Plot')\nplt.grid(True)\nplt.show()\n\n\n\n\nIn this example, we modify the line style to be dashed (--), set the line color to red, increase the line width, and customize the marker appearance with size and color adjustments.\n\n\n15.1.4 Adding Annotations and Legends\nAnnotations and legends can significantly enhance the interpretability of your plots. Annotations allow you to highlight specific data points or trends, while legends help distinguish different datasets in a multi-line plot.\nExample: Adding a Legend and Annotations\n\n# Data for multiple lines\nx = [1, 2, 3, 4, 5]\ny1 = [1, 4, 9, 16, 25]\ny2 = [2, 3, 4, 5, 6]\n\n# Plotting multiple lines\nplt.plot(x, y1, label='Dataset 1', color='blue')\nplt.plot(x, y2, label='Dataset 2', color='green')\n\n# Adding an annotation\nplt.annotate('Intersection', xy=(3, 9), xytext=(4, 15),\n             arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Customizing plot\nplt.xlabel('X-axis label')\nplt.ylabel('Y-axis label')\nplt.title('Annotated Plot with Legend')\nplt.legend(loc='upper left')\nplt.grid(True)\nplt.show()\n\n\n\n\nThis example demonstrates how to use the annotate() function to add a text label to a specific point on the plot, along with an arrow pointing to that location. The legend() function is used to add a legend that describes the different lines in the plot.\n\n\n15.1.5 Working with Subplots\nSubplots allow you to create multiple plots in a single figure, making it easier to compare different visualizations side by side.\nExample: Creating Subplots\n\n# Creating a figure with 2 rows and 1 column of subplots\nfig, axs = plt.subplots(2, 1, figsize=(6, 8))\n\n# First subplot\naxs[0].plot(x, y1, color='blue')\naxs[0].set_title('Line Plot 1')\naxs[0].set_xlabel('X-axis')\naxs[0].set_ylabel('Y-axis')\n\n# Second subplot\naxs[1].scatter(x, y2, color='green')\naxs[1].set_title('Scatter Plot 2')\naxs[1].set_xlabel('X-axis')\naxs[1].set_ylabel('Y-axis')\n\n# Display the plots\nplt.tight_layout()  # Adjusts spacing between subplots\nplt.show()\n\n\n\n\nThis example uses the subplots() function to create a figure with two subplots arranged in a column. Each subplot is customized with its own title, labels, and data.\n\n\n15.1.6 Styling and Themes in Matplotlib\nMatplotlib offers several built-in styles that can be applied to your plots to give them a consistent and visually appealing look. Styles can be easily switched using the plt.style.use() function.\nExample: Using Different Styles\n\n# Applying a style to the plot\nplt.style.use('ggplot')\n\n# Replotting the data with the new style\nplt.plot(x, y1, color='red', linestyle='-', marker='o')\nplt.title('Styled Plot with ggplot Theme')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n\n# Reset to the default style\nplt.style.use('default')\n\n\n\n\nIn this example, we apply the ggplot style to the plot, which gives it a different color scheme and grid design inspired by the aesthetics of the ggplot2 package in R.\n\n\n15.1.7 Saving Plots to Files\nOnce you’ve created your visualizations, you might want to save them as image files for use in presentations or publications.\nExample: Saving a Plot\n# Saving the plot to a file\nplt.plot(x, y1, color='blue', linestyle='--')\nplt.title('Plot to be Saved')\nplt.savefig('my_plot.png', dpi=300, bbox_inches='tight')\nThe savefig() function saves the plot as a PNG file with high resolution (specified by dpi=300) and tight bounding boxes to remove excess whitespace.\n\n\n15.1.8 Common Pitfalls and Best Practices\n\nAspect Ratio: Always check the aspect ratio of your plots to ensure they are not distorted.\nLabels and Titles: Make sure to label all axes and include a title to provide context to the visualization.\nColor Blindness: Use color palettes that are accessible to those with color vision deficiencies.\nLegend Placement: Place legends in a position that does not overlap with important data points.\n\nUnderstanding how to leverage the power of Matplotlib will enable you to create informative and professional-quality data visualizations, enhancing your ability to communicate data-driven insights."
  },
  {
    "objectID": "15_Data_Vis.html#introduction-to-seaborn",
    "href": "15_Data_Vis.html#introduction-to-seaborn",
    "title": "15  Data Visualization in Python",
    "section": "15.2 Introduction to Seaborn",
    "text": "15.2 Introduction to Seaborn\nSeaborn is a powerful Python visualization library built on top of Matplotlib, designed specifically for creating informative and attractive statistical graphics. It provides a high-level interface for drawing a variety of statistical plots and integrates seamlessly with data structures like Pandas DataFrames. Seaborn’s design philosophy emphasizes the importance of aesthetics, making it easy to generate complex visualizations with concise code.\n\n15.2.1 Getting Started with Seaborn\nTo use Seaborn, you first need to import the library. If you haven’t already installed it, you can do so using the following command:\n!pip install seaborn\nOnce installed, import Seaborn into your Python environment:\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n15.2.2 Creating Basic Plots with Seaborn\nSeaborn simplifies the process of creating plots by offering specific functions for different types of statistical visualizations. Some of the most commonly used plot types include scatter plots, line plots, histograms, and bar charts.\nExample: Creating a Scatter Plot\n\n# Sample data\ntips = sns.load_dataset('tips')\n\n# Creating a scatter plot\nsns.scatterplot(x='total_bill', y='tip', data=tips)\nplt.title('Scatter Plot of Total Bill vs. Tip')\nplt.xlabel('Total Bill')\nplt.ylabel('Tip')\nplt.show()\n\n\n\n\nIn this example, we use the tips dataset (which is built into Seaborn) to create a scatter plot that shows the relationship between the total bill and the tip amount.\n\n\n15.2.3 Customizing Visualizations with Seaborn\nSeaborn allows extensive customization of plot aesthetics to make visualizations more informative and appealing. You can easily modify colors, markers, and styles.\nExample: Customizing a Scatter Plot\n\n# Custom scatter plot with color and marker variations\nsns.scatterplot(x='total_bill', y='tip', hue='sex', style='smoker', size='size', data=tips)\nplt.title('Customized Scatter Plot of Total Bill vs. Tip')\nplt.xlabel('Total Bill')\nplt.ylabel('Tip')\nplt.show()\n\n\n\n\nHere, the scatter plot is customized to differentiate data points based on additional variables using color (hue), marker style (style), and size (size). This makes it easier to visualize relationships between multiple variables in a single plot.\n\n\n15.2.4 Visualizing Distributions\nUnderstanding the distribution of data is crucial in statistical analysis. Seaborn offers several functions specifically for visualizing distributions, such as histograms, KDE plots, and box plots.\nExample: Creating a Histogram and KDE Plot\n\n# Histogram and KDE plot for total bill\nsns.histplot(tips['total_bill'], kde=True, color='blue')\nplt.title('Distribution of Total Bill with Histogram and KDE')\nplt.xlabel('Total Bill')\nplt.ylabel('Frequency')\nplt.show()\n\n\n\n\nIn this example, we create a histogram of the total_bill variable with an overlaid Kernel Density Estimate (KDE), which provides a smoothed curve representing the distribution.\n\n\n15.2.5 Creating Categorical Plots\nSeaborn excels in creating categorical plots that help analyze the relationship between categorical data and numerical data. The most common types include bar plots, box plots, and violin plots.\nExample: Bar Plot\n\n# Bar plot showing the average tip amount by day\nsns.barplot(x='day', y='tip', data=tips, ci='sd', palette='viridis')\nplt.title('Average Tip by Day')\nplt.xlabel('Day')\nplt.ylabel('Average Tip')\nplt.show()\n\nC:\\Users\\Joshua_Patrick\\AppData\\Local\\Temp\\ipykernel_38608\\690395935.py:2: FutureWarning: \n\nThe `ci` parameter is deprecated. Use `errorbar='sd'` for the same effect.\n\n  sns.barplot(x='day', y='tip', data=tips, ci='sd', palette='viridis')\nC:\\Users\\Joshua_Patrick\\AppData\\Local\\Temp\\ipykernel_38608\\690395935.py:2: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x='day', y='tip', data=tips, ci='sd', palette='viridis')\n\n\n\n\n\nThis bar plot displays the average tip amount for each day of the week, using error bars to indicate the standard deviation. Seaborn’s color palettes, like viridis, enhance the plot’s visual appeal.\nExample: Box Plot\n\n# Box plot showing the distribution of total bill by day\nsns.boxplot(x='day', y='total_bill', hue='smoker', data=tips, palette='Set2')\nplt.title('Box Plot of Total Bill by Day')\nplt.xlabel('Day')\nplt.ylabel('Total Bill')\nplt.show()\n\n\n\n\nThe box plot provides insights into the distribution of the total_bill by day, highlighting the median, interquartile range (IQR), and potential outliers. The hue parameter adds another layer to the plot, differentiating between smokers and non-smokers.\n\n\n15.2.6 Pair Plots for Multivariate Analysis\nPair plots are useful for visualizing relationships between multiple variables at once. They create a grid of scatter plots for each pair of variables and display histograms for individual variable distributions.\nExample: Pair Plot\n\n# Creating a pair plot of the tips dataset\nsns.pairplot(tips, hue='sex', palette='coolwarm')\nplt.suptitle('Pair Plot of the Tips Dataset', y=1.02)\nplt.show()\n\n\n\n\nIn this example, the pair plot provides a comprehensive view of pairwise relationships between all numerical variables in the dataset, with color-coded distinctions based on the sex variable.\n\n\n15.2.7 Heatmaps for Correlation Analysis\nHeatmaps are an effective way to visualize the correlation matrix of numerical data, showing how strongly pairs of variables are related.\nExample: Creating a Heatmap\n\n# Correlation heatmap for the tips dataset\ncorr = tips.corr(numeric_only = True)\nsns.heatmap(corr, annot=True, cmap='coolwarm', linewidths=0.5)\nplt.title('Correlation Heatmap of Tips Dataset')\nplt.show()\n\n\n\n\nThe heatmap in this example displays the correlation coefficients between variables in the tips dataset, with color intensity indicating the strength of the correlation. The annot=True parameter ensures that the correlation values are displayed on the heatmap.\n\n\n15.2.8 Customizing Seaborn Themes\nSeaborn comes with several built-in themes to enhance the appearance of plots, making it easy to change the overall look with minimal code.\nExample: Applying a Different Theme\n\n# Set a Seaborn style for all plots\nsns.set_style('whitegrid')\n\n# Creating a box plot with the new style\nsns.boxplot(x='day', y='total_bill', data=tips, palette='pastel')\nplt.title('Box Plot with Whitegrid Theme')\nplt.xlabel('Day')\nplt.ylabel('Total Bill')\nplt.show()\n\nC:\\Users\\Joshua_Patrick\\AppData\\Local\\Temp\\ipykernel_38608\\3431770401.py:5: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(x='day', y='total_bill', data=tips, palette='pastel')\n\n\n\n\n\nIn this example, the whitegrid style adds grid lines to the plot background, which can help in analyzing data points more effectively.\n\n\n15.2.9 Combining Seaborn with Matplotlib\nAlthough Seaborn provides a high-level interface for creating plots, it is often beneficial to use Matplotlib functions for further customization.\nExample: Combining Seaborn and Matplotlib for Plot Customization\n\n# Creating a violin plot with Seaborn\nsns.violinplot(x='day', y='total_bill', data=tips, inner='quartile', palette='Set3')\n\n# Customizing with Matplotlib\nplt.axhline(y=20, color='red', linestyle='--')  # Add a reference line\nplt.title('Violin Plot with Custom Reference Line')\nplt.xlabel('Day')\nplt.ylabel('Total Bill')\nplt.show()\n\nC:\\Users\\Joshua_Patrick\\AppData\\Local\\Temp\\ipykernel_38608\\122318432.py:2: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.violinplot(x='day', y='total_bill', data=tips, inner='quartile', palette='Set3')\n\n\n\n\n\nIn this example, a Seaborn violin plot is enhanced with a Matplotlib horizontal line, illustrating the synergy between the two libraries for creating complex visualizations.\n\n\n15.2.10 Advantages of Using Seaborn\n\nSimplified Syntax: Seaborn’s API is intuitive and reduces the code complexity for creating statistical graphics.\nBuilt-in Themes: It offers aesthetically pleasing color palettes and themes that enhance the visual appeal.\nIntegration with Pandas: Seamlessly works with Pandas DataFrames, making data manipulation and visualization straightforward.\nStatistical Visualization: Designed specifically for statistical plotting, providing functions that directly interpret and visualize statistical relationships.\n\n\n\n15.2.11 Limitations and Considerations\n\nCustomization Limitations: Although Seaborn is powerful, certain highly specific customizations may require falling back on Matplotlib.\nLearning Curve: Requires familiarity with data structures like DataFrames and understanding of statistical concepts for full utilization."
  },
  {
    "objectID": "15_Data_Vis.html#introduction-to-ggplot-plotnine",
    "href": "15_Data_Vis.html#introduction-to-ggplot-plotnine",
    "title": "15  Data Visualization in Python",
    "section": "15.3 Introduction to ggplot (plotnine)",
    "text": "15.3 Introduction to ggplot (plotnine)\nThe ggplot library in Python, made accessible through the plotnine package, is inspired by the grammar of graphics principles introduced by Leland Wilkinson. This approach allows data visualizations to be built by combining independent layers, where each layer adds a new element to the plot. This methodology enables the creation of highly customizable and aesthetically pleasing plots with a structured syntax that emphasizes clarity and reproducibility.\n\n15.3.1 The Grammar of Graphics\nThe grammar of graphics is a theoretical framework that breaks down the process of constructing data visualizations into independent components:\n\nData: The dataset being visualized.\nAesthetics (aes): The mapping of data variables to visual properties, such as position, color, and size.\nGeometries (geoms): The visual elements that represent data points, such as lines, bars, points, or histograms.\nFacets: The ability to split data into subplots for comparison.\nStatistics: Transformation or summary of data to highlight patterns.\nScales: Controls the mapping between data values and their visual representation.\nCoordinate systems: Defines how data points are placed in a plot.\n\nUnderstanding this layered approach helps in constructing meaningful and well-organized visualizations.\n\n\n15.3.2 Creating a Basic Plot with ggplot\nTo use ggplot in Python, you will need to install the plotnine package if you haven’t already:\n!pip install plotnine\nNow, let’s begin by creating a basic line plot using plotnine. We will use a simple dataset to demonstrate how to create a visualization using the ggplot syntax.\n\nimport pandas as pd\nfrom plotnine import ggplot, aes, geom_line, ggtitle\n\n# Creating a dataset\ndata = pd.DataFrame({\n    'x': [1, 2, 3, 4, 5],\n    'y': [1, 4, 9, 16, 25]\n})\n\n# Creating a basic line plot\n(ggplot(data, aes(x='x', y='y')) +\n geom_line() +\n ggtitle('Basic Line Plot with ggplot'))\n\n\n\n\nIn this example, we define the dataset and specify the aesthetics using aes(), which maps the x and y variables to the axes of the plot. The geom_line() function adds a line graph layer to the plot. The title is set using ggtitle().\n\n\n15.3.3 Enhancing Visualizations with Layers\nOne of the strengths of ggplot is the ability to add multiple layers to a plot, allowing you to build more informative visualizations.\nExample: Adding Points to a Line Plot\n\nfrom plotnine import geom_point, xlab, ylab\n\n# Adding a layer of points to the line plot\n(ggplot(data, aes(x='x', y='y')) +\n geom_line(color='blue') +\n geom_point(color='red', size=3) +\n ggtitle('Enhanced Line Plot with Points') +\n xlab('X-axis') +\n ylab('Y-axis'))\n\n\n\n\nHere, we use the geom_point() function to overlay points on the existing line plot. This combination helps highlight individual data points while still showing the overall trend.\n\n\n15.3.4 Common Plot Types in ggplot\nggplot supports a wide variety of plot types, each suited for different types of data analysis:\n\nScatter Plots: Used to visualize relationships between two continuous variables.\nBar Charts: Ideal for comparing categorical data.\nHistograms: Useful for visualizing the distribution of a single variable.\nBox Plots: Helps to visualize the spread, central tendency, and outliers in data.\n\nExample: Creating a Scatter Plot\n\n# Creating a dataset for the scatter plot\nscatter_data = pd.DataFrame({\n    'x': [5, 7, 8, 5, 9, 7],\n    'y': [3, 8, 4, 7, 2, 5]\n})\n\n# Scatter plot with ggplot\n(ggplot(scatter_data, aes(x='x', y='y')) +\n geom_point(color='green', size=4) +\n ggtitle('Scatter Plot Example') +\n xlab('X-axis Label') +\n ylab('Y-axis Label'))\n\n\n\n\nIn this example, the scatter plot is created using geom_point(), with customizations for point color and size.\n\n\n15.3.5 Faceting for Multi-Plot Layouts\nFaceting in ggplot allows you to create multiple subplots within a single plot, enabling easy comparison of different subsets of the data. Faceting can be done by rows, columns, or both.\nExample: Faceting with a Categorical Variable\n\nfrom plotnine import facet_wrap\n\n# Creating a dataset for faceting\nfacet_data = pd.DataFrame({\n    'x': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5],\n    'y': [5, 7, 8, 9, 10, 3, 4, 5, 6, 7],\n    'category': ['A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B']\n})\n\n# Facet plot with ggplot\n(ggplot(facet_data, aes(x='x', y='y')) +\n geom_line() +\n facet_wrap('~category') +\n ggtitle('Faceted Line Plot by Category') +\n xlab('X-axis') +\n ylab('Y-axis'))\n\n\n\n\nThis example uses facet_wrap() to create separate plots for each category in the dataset, allowing for a clear visual comparison between the groups.\n\n\n15.3.6 Customizing Aesthetics and Themes\nCustomization in ggplot extends beyond simple color and size adjustments. The library allows for fine-tuning the plot’s appearance through themes, which can dramatically change the look and feel of your visualizations.\nExample: Using a Different Theme\n\nfrom plotnine import theme_minimal, theme_bw\n\n# Applying a minimal theme to a scatter plot\n(ggplot(scatter_data, aes(x='x', y='y')) +\n geom_point(color='blue', size=4) +\n ggtitle('Scatter Plot with Minimal Theme') +\n xlab('X-axis Label') +\n ylab('Y-axis Label') +\n theme_minimal())\n\n\n\n\nIn this example, the theme_minimal() function is applied to give the plot a clean and modern look, with minimal grid lines and axis labels.\n\n\n15.3.7 Statistical Transformations\nggplot in Python supports built-in statistical transformations to highlight trends and patterns within the data. These transformations can automatically compute summaries like smoothing lines or histograms.\nExample: Adding a Smoothing Line to a Scatter Plot\n\nfrom plotnine import geom_smooth\n\n# Scatter plot with a smoothing line\n(ggplot(scatter_data, aes(x='x', y='y')) +\n geom_point(color='red', size=3) +\n geom_smooth(method='lm', color='blue') +\n ggtitle('Scatter Plot with Smoothing Line') +\n xlab('X-axis Label') +\n ylab('Y-axis Label'))\n\n\n\n\nHere, geom_smooth() adds a linear regression line to the scatter plot, showing the trend in the data points.\n\n\n15.3.8 Advantages of Using ggplot\n\nConsistency: The grammar of graphics approach ensures that the process of building plots is systematic and repeatable.\nCustomization: Every aspect of the plot can be adjusted to suit specific needs or aesthetic preferences.\nLayered Design: Allows for easy addition and modification of plot components without altering the underlying structure.\nBuilt-In Statistical Tools: Supports automatic statistical transformations to help identify patterns in the data.\n\n\n\n15.3.9 Limitations and Considerations\nWhile ggplot offers great flexibility and aesthetic appeal, there are some considerations to keep in mind:\n\nPerformance: Rendering complex visualizations with large datasets can be slower compared to other libraries.\nLearning Curve: Requires a solid understanding of the grammar of graphics concepts, which might be challenging for beginners.\nDependencies: As a port of ggplot2 from R, some features might differ or be less developed than in the R version."
  },
  {
    "objectID": "15_Data_Vis.html#exercises",
    "href": "15_Data_Vis.html#exercises",
    "title": "15  Data Visualization in Python",
    "section": "15.4 Exercises",
    "text": "15.4 Exercises\n\nExercise 1: Working with Matplotlib - Creating Basic Line Plots\n\nUsing Matplotlib, create a line plot of the function \\(f(x) = x^2\\) for \\(x\\) values ranging from -10 to 10. Customize the plot by adding labels to the axes, a title, and a grid.\nModify your plot to change the line color to red and use a dashed line style. Add circular markers to each data point.\n\n\n\nExercise 2: Working with Matplotlib - Scatter Plot Customization\n\nGenerate a scatter plot using the following data:\n\n\\(x = [2, 4, 6, 8, 10]\\)\n\\(y = [1, 4, 9, 16, 25]\\)\n\nCustomize the scatter plot by using triangle markers, coloring the points green, and increasing the marker size. Label the axes and add a title to the plot.\n\n\n\nExercise 3: Working with Matplotlib - Creating Subplots\n\nCreate a figure with two subplots arranged vertically:\n\nThe first subplot should be a line plot of \\(f(x) = x^3\\) for \\(x\\) values from -5 to 5.\nThe second subplot should be a scatter plot of the points \\((-3, -27)\\), \\((-2, -8)\\), \\((0, 0)\\), \\((2, 8)\\), and \\((3, 27)\\).\n\nEnsure that each subplot has a title and labeled axes, and adjust the spacing between the plots for better readability.\n\n\n\nExercise 4: Advanced Data Visualization with Seaborn - Analyzing Data Distributions\n\nLoad the built-in tips dataset from Seaborn. Create a histogram of the total_bill variable with a KDE (Kernel Density Estimate) overlay. Customize the color of the histogram and KDE line.\nInterpret the resulting plot, describing any noticeable patterns in the distribution of the total_bill values.\n\n\n\nExercise 5: Advanced Data Visualization with Seaborn - Comparing Categorical Data\n\nUsing the tips dataset, create a box plot to visualize the distribution of tips received by day of the week. Differentiate between smokers and non-smokers using the hue parameter.\nAnalyze the box plot to determine on which day the highest median tip amount is given and whether smokers tend to tip more than non-smokers.\n\n\n\nExercise 6: Advanced Data Visualization with Seaborn - Correlation Analysis with Heatmaps\n\nGenerate a heatmap showing the correlation matrix of the numerical variables in the tips dataset. Use the coolwarm color palette and display the correlation values on the heatmap.\nBased on the heatmap, identify which two variables have the strongest correlation and describe their relationship.\n\n\n\nExercise 7: Exploring ggplot with plotnine - Basic Line Plot with ggplot\n\nUsing the plotnine package, create a basic line plot of the function \\(g(x) = \\sin(x)\\) for \\(x\\) values ranging from 0 to \\(2\\pi\\). Add appropriate labels to the axes and a title to the plot.\nEnhance the plot by adding points at each integer value of \\(x\\) with different color markers.\n\n\n\nExercise 8: Exploring ggplot with plotnine - Creating Faceted Plots\n\nCreate a dataset with two groups, “A” and “B”, and plot a faceted line plot using ggplot. Plot the following data points:\n\nGroup A: \\((1, 2)\\), \\((2, 4)\\), \\((3, 8)\\), \\((4, 16)\\)\nGroup B: \\((1, 1)\\), \\((2, 2)\\), \\((3, 3)\\), \\((4, 4)\\)\n\nUse facetting to display each group’s plot in a separate subplot and ensure that both plots share the same x-axis and y-axis labels.\n\n\n\nExercise 9: Exploring ggplot with plotnine - Applying Themes and Aesthetic Modifications\n\nCreate a scatter plot using ggplot with a dataset of your choice. Apply the theme_minimal style and modify the aesthetics by changing the point color, size, and adding a smooth line to represent the trend in the data.\nSave your plot as a PNG file with a resolution of 300 dpi."
  }
]